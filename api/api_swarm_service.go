/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.41) is used. For example, calling `/info` is the same as calling `/v1.41/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * API version: 1.41
 * Generated by: api Generator (https://api-generator.tech)
 */

package api

import (
	"context"
	"net/http"
	"errors"
)

// SwarmApiService is a service that implents the logic for the SwarmApiServicer
// This service should implement the business logic for every endpoint for the SwarmApi API. 
// Include any external packages or services that will be required by this service.
type SwarmApiService struct {
}

// NewSwarmApiService creates a default api service
func NewSwarmApiService() SwarmApiServicer {
	return &SwarmApiService{}
}

// SwarmInit - Initialize a new swarm
func (s *SwarmApiService) SwarmInit(ctx context.Context, body InlineObject5) (ImplResponse, error) {
	// TODO - update SwarmInit with the required logic for this service method.
	// Add api_swarm_service.api to the .api-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, string{}) or use other options such as http.Ok ...
	//return Response(200, string{}), nil

	//TODO: Uncomment the next line to return response Response(400, ErrorResponse{}) or use other options such as http.Ok ...
	//return Response(400, ErrorResponse{}), nil

	//TODO: Uncomment the next line to return response Response(500, ErrorResponse{}) or use other options such as http.Ok ...
	//return Response(500, ErrorResponse{}), nil

	//TODO: Uncomment the next line to return response Response(503, ErrorResponse{}) or use other options such as http.Ok ...
	//return Response(503, ErrorResponse{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("SwarmInit method not implemented")
}

// SwarmInspect - Inspect swarm
func (s *SwarmApiService) SwarmInspect(ctx context.Context) (ImplResponse, error) {
	// TODO - update SwarmInspect with the required logic for this service method.
	// Add api_swarm_service.api to the .api-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, Swarm{}) or use other options such as http.Ok ...
	//return Response(200, Swarm{}), nil

	//TODO: Uncomment the next line to return response Response(404, ErrorResponse{}) or use other options such as http.Ok ...
	//return Response(404, ErrorResponse{}), nil

	//TODO: Uncomment the next line to return response Response(500, ErrorResponse{}) or use other options such as http.Ok ...
	//return Response(500, ErrorResponse{}), nil

	//TODO: Uncomment the next line to return response Response(503, ErrorResponse{}) or use other options such as http.Ok ...
	//return Response(503, ErrorResponse{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("SwarmInspect method not implemented")
}

// SwarmJoin - Join an existing swarm
func (s *SwarmApiService) SwarmJoin(ctx context.Context, body InlineObject6) (ImplResponse, error) {
	// TODO - update SwarmJoin with the required logic for this service method.
	// Add api_swarm_service.api to the .api-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	//return Response(200, nil),nil

	//TODO: Uncomment the next line to return response Response(400, ErrorResponse{}) or use other options such as http.Ok ...
	//return Response(400, ErrorResponse{}), nil

	//TODO: Uncomment the next line to return response Response(500, ErrorResponse{}) or use other options such as http.Ok ...
	//return Response(500, ErrorResponse{}), nil

	//TODO: Uncomment the next line to return response Response(503, ErrorResponse{}) or use other options such as http.Ok ...
	//return Response(503, ErrorResponse{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("SwarmJoin method not implemented")
}

// SwarmLeave - Leave a swarm
func (s *SwarmApiService) SwarmLeave(ctx context.Context, force bool) (ImplResponse, error) {
	// TODO - update SwarmLeave with the required logic for this service method.
	// Add api_swarm_service.api to the .api-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	//return Response(200, nil),nil

	//TODO: Uncomment the next line to return response Response(500, ErrorResponse{}) or use other options such as http.Ok ...
	//return Response(500, ErrorResponse{}), nil

	//TODO: Uncomment the next line to return response Response(503, ErrorResponse{}) or use other options such as http.Ok ...
	//return Response(503, ErrorResponse{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("SwarmLeave method not implemented")
}

// SwarmUnlock - Unlock a locked manager
func (s *SwarmApiService) SwarmUnlock(ctx context.Context, body InlineObject7) (ImplResponse, error) {
	// TODO - update SwarmUnlock with the required logic for this service method.
	// Add api_swarm_service.api to the .api-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	//return Response(200, nil),nil

	//TODO: Uncomment the next line to return response Response(500, ErrorResponse{}) or use other options such as http.Ok ...
	//return Response(500, ErrorResponse{}), nil

	//TODO: Uncomment the next line to return response Response(503, ErrorResponse{}) or use other options such as http.Ok ...
	//return Response(503, ErrorResponse{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("SwarmUnlock method not implemented")
}

// SwarmUnlockkey - Get the unlock key
func (s *SwarmApiService) SwarmUnlockkey(ctx context.Context) (ImplResponse, error) {
	// TODO - update SwarmUnlockkey with the required logic for this service method.
	// Add api_swarm_service.api to the .api-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, UnlockKeyResponse{}) or use other options such as http.Ok ...
	//return Response(200, UnlockKeyResponse{}), nil

	//TODO: Uncomment the next line to return response Response(500, ErrorResponse{}) or use other options such as http.Ok ...
	//return Response(500, ErrorResponse{}), nil

	//TODO: Uncomment the next line to return response Response(503, ErrorResponse{}) or use other options such as http.Ok ...
	//return Response(503, ErrorResponse{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("SwarmUnlockkey method not implemented")
}

// SwarmUpdate - Update a swarm
func (s *SwarmApiService) SwarmUpdate(ctx context.Context, version int64, body SwarmSpec, rotateWorkerToken bool, rotateManagerToken bool, rotateManagerUnlockKey bool) (ImplResponse, error) {
	// TODO - update SwarmUpdate with the required logic for this service method.
	// Add api_swarm_service.api to the .api-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	//return Response(200, nil),nil

	//TODO: Uncomment the next line to return response Response(400, ErrorResponse{}) or use other options such as http.Ok ...
	//return Response(400, ErrorResponse{}), nil

	//TODO: Uncomment the next line to return response Response(500, ErrorResponse{}) or use other options such as http.Ok ...
	//return Response(500, ErrorResponse{}), nil

	//TODO: Uncomment the next line to return response Response(503, ErrorResponse{}) or use other options such as http.Ok ...
	//return Response(503, ErrorResponse{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("SwarmUpdate method not implemented")
}

